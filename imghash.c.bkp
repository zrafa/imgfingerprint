
#include <stdio.h>
#include <stdlib.h>
#include <string.h>



char * imghash(const char *);



#include <png.h>

void convertir(char* name) {
    FILE *fp_in = fopen(name, "rb");
    if (!fp_in) {
        fprintf(stderr, "Error: File %s could not be opened for reading.\n", name);
        return;
    }

    FILE *fp_out = fopen("/tmp/output.png", "wb");
    if (!fp_out) {
        fclose(fp_in);
        fprintf(stderr, "Error: File could not be opened for writing.\n" );
        return;
    }

    // Initialize PNG structures
    png_structp png_ptr = png_create_read_struct(PNG_LIBPNG_VER_STRING, NULL, NULL, NULL);
    if (!png_ptr) {
        fclose(fp_in);
        fclose(fp_out);
        fprintf(stderr, "Error: png_create_read_struct failed.\n");
        return;
    }

    png_infop info_ptr = png_create_info_struct(png_ptr);
    if (!info_ptr) {
        png_destroy_read_struct(&png_ptr, NULL, NULL);
        fclose(fp_in);
        fclose(fp_out);
        fprintf(stderr, "Error: png_create_info_struct failed.\n");
        return;
    }

    if (setjmp(png_jmpbuf(png_ptr))) {
        png_destroy_read_struct(&png_ptr, &info_ptr, NULL);
        fclose(fp_in);
        fclose(fp_out);
        fprintf(stderr, "Error: Error during init_io or reading PNG file.\n");
        return;
    }

    // Set up input/output for PNG
    png_init_io(png_ptr, fp_in);
    png_read_info(png_ptr, info_ptr);

    int width = png_get_image_width(png_ptr, info_ptr);
    int height = png_get_image_height(png_ptr, info_ptr);
    png_byte color_type = png_get_color_type(png_ptr, info_ptr);
    png_byte bit_depth = png_get_bit_depth(png_ptr, info_ptr);

    // Allocate memory for image data
    png_bytep *row_pointers = (png_bytep*) malloc(sizeof(png_bytep) * height);
    for (int y = 0; y < height; y++) {
        row_pointers[y] = (png_byte*) malloc(png_get_rowbytes(png_ptr, info_ptr));
    }

    // Read image data
    png_read_image(png_ptr, row_pointers);

    // Process image: set left and right sides to black
    int margin = width / 3;
    for (int y = 0; y < height; y++) {
        // Set left margin to black
        for (int x = 0; x < margin; x++) {
            png_bytep px = &(row_pointers[y][x * 4]);
            px[0] = 0; // Red
            px[1] = 0; // Green
            px[2] = 0; // Blue
        }
        // Set right margin to black
        for (int x = width - margin; x < width; x++) {
            png_bytep px = &(row_pointers[y][x * 4]);
            px[0] = 0; // Red
            px[1] = 0; // Green
            px[2] = 0; // Blue
        }
    }

    // Write the modified image
    png_set_compression_level(png_ptr, 6); // Adjust compression level as needed
    png_init_io(png_ptr, fp_out);
    png_set_IHDR(png_ptr, info_ptr, width, height, bit_depth, color_type, PNG_INTERLACE_NONE, PNG_COMPRESSION_TYPE_DEFAULT, PNG_FILTER_TYPE_DEFAULT);
    png_write_info(png_ptr, info_ptr);
    png_write_image(png_ptr, row_pointers);
    png_write_end(png_ptr, NULL);

    // Clean up
    png_destroy_read_struct(&png_ptr, &info_ptr, NULL);
    fclose(fp_in);
    fclose(fp_out);

    // Free allocated memory
    for (int y = 0; y < height; y++) {
        free(row_pointers[y]);
    }
    free(row_pointers);

    printf("Image processing complete. Output saved to \n");
}





int main() {

    char path[1035];
    char ruta[1024];
    char *ruta2 = "/tmp/output.png";

    const char * p = "/home/rafa/programacion/cand_doctorado/loop-detection/imgdiff/chicas/png/image0.jpg.chica.jpg.png";
    const char * parte1 = "/home/rafa/programacion/cand_doctorado/loop-detection/imgdiff/chicas/png/image";
    const char * parte2 = ".jpg.chica.jpg.png";

    while(1) {
        // Leer la ruta de la imagen desde stdin
	/*
        printf("Enter image path: ");
        fflush(0);
        if (fgets(path, sizeof(path)-1, stdin) == NULL) {
            printf("Failed to read image path\n");
            break;
        }
        path[strcspn(path, "\n")] = 0;  // Eliminar el salto de lÃ­nea
        printf("pasamos 1: ");
        fflush(0);

	char *resultado = imghash(path);
	*/
	char *resultado = imghash(p);

	int i;
	double d=0;
	for (i=1; i<=8; i++) {
		sprintf(ruta,"%s%i%s",parte1, i, parte2);
//		convertir(ruta);
		//resultado = imghash(ruta2);
		resultado = imghash(ruta);
		d = d+atof(resultado);
        	printf("1.%i :\t\t%lf\n", i, atof(resultado));
	}
        printf("1 :\t\t%lf\n", d/8.0);

	d=0;
	for (i=9; i<=16; i++) {
		sprintf(ruta,"%s%i%s",parte1, i, parte2);
//		convertir(ruta);
		//resultado = imghash(ruta2);
		resultado = imghash(ruta);
		d = d+atof(resultado);
        	printf("2.%i :\t\t%lf\n", i, atof(resultado));
	}
        printf("2 : \t\t%lf\n", d/8.0);

	d=0;
	for (i=17; i<=24; i++) {
		sprintf(ruta,"%s%i%s",parte1, i, parte2);
		convertir(ruta);
		//resultado = imghash(ruta2);
		//resultado = imghash(ruta);
		d = d+atof(resultado);
        	printf("3.%i : \t\t%lf\n", i, atof(resultado));
	}
        printf("3 : \t\t%lf\n", d/8.0);

	sprintf(ruta,"%s25%s",parte1, parte2);
	//convertir(ruta2);
	resultado = imghash(ruta);
        printf("res: \t\t%lf\n", atof(resultado));

        // Imprimir el resultado
        printf("Average Hash (entero): %s", resultado);
        fflush(0);
	exit(0);
    }

    return 0;
}

